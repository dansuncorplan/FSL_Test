#region Prolog


#~~~~~~~~~~ProcessLogging~~~~~~~~~~#
#Variables
processName=GetProcessName();
timeStart=NOW;
dateStart = TIMST(timeStart,'\Y \M \d - \h:\i:\s');
elementName = processName | ' - ' | dateStart;
countRecords = 0;
status = 'Not Complete';
#Send parameters to StartLogging
return_value = ExecuteProcess('z_ADMIN_Process_Logging_Start','processName', processName,'elementName',elementName);
#Write status information for Start
CELLPUTS(status,'z_Process_Logging',elementName,'Status');
CELLPUTS(dateStart,'z_Process_Logging',elementName,'StartTime');
CELLPUTS(processName,'z_Process_Logging',elementName,'ProcessName');
CELLPUTS(status,'z_Process_Logging',processName,'Status');
CELLPUTS(dateStart,'z_Process_Logging',processName,'StartTime');
CELLPUTS(processName,'z_Process_Logging',processName,'ProcessName');
#~~~~~~~~~~EndProcessLogging~~~~~~~~~~#


#****Begin: Generated Statements***
#****End: Generated Statements****


## Description
## Load Sales Data from ODBC for Easysteel business units



## Hardcoded Variables

sTargetCube = 'rpt_Sales' ;

sParameterCube = 'z_System_Parameters' ;
sMapBranchCube = 'map_Branch_Business_Unit' ;

sVersionDim = 'rpt_Version' ;
sCurrencyDim = 'Currency_Sales' ;
sMonthDim = 'rpt_Month' ;
sYearDim = 'rpt_Year' ;
sBranchDim = 'Branch' ;
sBusUnitDim = 'rpt_Business_Unit' ;
sCustomerDim = 'Customer_Sales' ;
sProductDim = 'Product_Group' ;

sBranchDescDim = 'Branch_Desc' ;

sTargetMeasureDim = 'm_rpt_Sales' ;

sTargetBusinessUnit = 'Easysteel' ;

sView = processName ;
sSubset = sView ;



## Create Target View

sCube = sTargetCube ;

IF( VIEWEXISTS( sCube, sView ) = 1 ) ;
	VIEWDESTROY( sCube, sView ) ;
ENDIF ;

VIEWCREATE( sCube, sView ) ;



## Subset - Version

sDim = sVersionDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( sElement @= pVersion ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Currency

sDim = sCurrencyDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Month

sDim = sMonthDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Year

sDim = sYearDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Branch

sDim = sBranchDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Business Unit

sDim = sBusUnitDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELISANC( sDim, sTargetBusinessUnit, sElement ) = 1 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Customer

sDim = sCustomerDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Product

sDim = sProductDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Measure

sDim = sTargetMeasureDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;




## Zero Out Target View

VIEWZEROOUT( sCube, sView ) ;



## Destroy Target View & Subsets

VIEWDESTROY( sCube, sView ) ;

SUBSETDESTROY( sVersionDim, sSubset ) ;
SUBSETDESTROY( sCurrencyDim, sSubset ) ;
SUBSETDESTROY( sMonthDim, sSubset ) ;
SUBSETDESTROY( sYearDim, sSubset ) ;
SUBSETDESTROY( sBranchDim, sSubset ) ;
SUBSETDESTROY( sBusUnitDim, sSubset ) ;
SUBSETDESTROY( sCustomerDim, sSubset ) ;
SUBSETDESTROY( sProductDim, sSubset ) ;
SUBSETDESTROY( sTargetMeasureDim, sSubset ) ;
#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****




## Add Missing Products

sDim = sProductDim ;
sElement = vProduct ;
sCons = 'Easysteel Products' ;

IF( DIMIX( sDim, sElement ) = 0 ) ;

	DIMENSIONELEMENTINSERT( sDim, '', sElement, 'N' ) ;
	DIMENSIONELEMENTCOMPONENTADD( sDim, sCons, sElement, 1 ) ;

ENDIF ;



## Add Missing Branch Descriptions for Mapping

sDim = sBranchDescDim ;
sElement = vBranch_Desc ;
sCons = 'TOTAL_BRANCH_DESC' ;

IF( DIMIX( sDim, sElement ) = 0 ) ;

	DIMENSIONELEMENTINSERT( sDim, '', sElement, 'N' ) ;
	DIMENSIONELEMENTCOMPONENTADD( sDim, sCons, sElement, 1 ) ;

ENDIF ;
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



## Variables

sVersion = pVersion ;
sCurrency = 'NZD' ;
sMonth = vMonth ;
sYear = SUBST( vYear, 4, 4 ) ;
sCustomer = 'ES_NZ Other' ;
sProduct = vProduct ;



## Map Branch

sMapMeasure = 'Branch_Mapping' ;
sBranch = CELLGETS( sMapBranchCube, vBranch_Desc, sMapMeasure ) ;

IF( DIMIX( sBranchDim, sBranch ) = 0 ) ;
	ITEMREJECT( 'Missing branch mapping for branch: ' | vBranch_Desc ) ;
ENDIF ;



## Map Business Unit

sMapMeasure = 'Business_Unit_Mapping' ;
sBusinessUnit = CELLGETS( sMapBranchCube, vBranch_Desc, sMapMeasure ) ;

IF( DIMIX( sBusUnitDim, sBusinessUnit ) = 0 ) ;
	ITEMREJECT( 'Missing business unit mapping for branch: ' | vBranch_Desc ) ;
ENDIF ;



## Load Values - Tonnes

sMeasure = 'Sales Volume - TN' ;
nValue = vTonnes ;

nAccValue = CELLGETN( sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;

CELLPUTN( nValue + nAccValue, sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;



## Load Values -  Sales Volume - Converted

sMeasure = 'Sales Volume - Converted' ;
nValue = vTonnes ;

#nAccValue = CELLGETN( sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;

#CELLPUTN( nValue + nAccValue, sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;



## Load Values - Revenue

sMeasure = 'TOTAL SALES $' ;
nValue = vNetSales ;

nAccValue = CELLGETN( sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;

CELLPUTN( nValue + nAccValue, sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;



## Load Values - Cost of Sales

sMeasure = 'COST OF SALES STANDARD $' ;
nValue = vCostOfSales ;

nAccValue = CELLGETN( sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;

CELLPUTN( nValue + nAccValue, sTargetCube, sVersion, sCurrency, sMonth, sYear, sBranch, sBusinessUnit, sCustomer, sProduct, sMeasure ) ;


#~~~~~~~~~~ProcessLogging~~~~~~~~~~#
countRecords = countRecords + 1;
#~~~~~~~~~~EndProcessLogging~~~~~~~~~~#
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****











#~~~~~~~~~~ProcessLogging~~~~~~~~~~#
#Variables
timeFinish=NOW;
elapsedTime=TIMST(timeFinish - timeStart,'\h:\i:\s');
dateFinish = TIMST(timeFinish,'\Y \M \d - \h:\i:\s');
status = 'Complete';
#Write status information for Finish
CELLPUTS(status,'z_Process_Logging',elementName,'Status');
CELLPUTS(dateFinish,'z_Process_Logging',elementName,'FinishTime');
CELLPUTS(elapsedTime,'z_Process_Logging',elementName,'Elapsed Time');
CELLPUTN(countRecords,'z_Process_Logging',elementName,'Records');
CELLPUTS(status,'z_Process_Logging',processName,'Status');
CELLPUTS(dateFinish,'z_Process_Logging',processName,'FinishTime');
CELLPUTS(elapsedTime,'z_Process_Logging',processName,'Elapsed Time');
#~~~~~~~~~~EndProcessLogging~~~~~~~~~~#
#endregion