#region Prolog

# #----------------------------------------------------
#  Define constant
# #----------------------------------------------------

cProcessName = GetProcessName();

sErr = '' ;

cTimeStamp = TIMST( NOW() , '\Y\m\d\h\i\s' ) | NumberToString( RAND * 1000000000 );
cTempObjName = Expand('%cProcessName%_%cTimeStamp%');
cSourceObj='source_'|cTempObjName;
cTargetRandObjName = 'Target'|cProcessName|cTimeStamp;
cTemp = 1 ;

#--------------
If(pVersionFrom@=pVersionTo & pPeriodFrom@=pPeriodTo);
    sErr='Source and target cannot be the same!';
    ProcessBreak; 
Endif;    


# # ----------------------------------------------------
# # zero target view
# # ----------------------------------------------------
cTargetCube = 'plan_Balance_Sheet';

ViewCreate( cTargetCube , cTargetRandObjName , cTemp );

SubsetCreatebyMDX( cTargetRandObjName , '{[plan_Version].[plan_Version].['|pVersionTo |']}' , cTemp ); 
SubsetCreatebyMDX( cTargetRandObjName , '{[Currency].[Currency].[LCY]}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{[plan_Period].[plan_Period].['|pPeriodTo|']}' , cTemp ); 
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Branch].[Branch]) , 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Business_Unit].[Business_Unit]) , 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Account_BS].[Account_BS]) , 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{[m_plan_Balance_Sheet].[m_plan_Balance_Sheet].[Value]}' , cTemp );

nDimCount = 1;
WHILE( TABDIM( cTargetCube , nDimCount )@<> '' );
	sDim = TABDIM( cTargetCube , nDimCount );
	IF( SUBSETEXISTS( sDim , cTargetRandObjName ) = 1 );
		VIEWSUBSETASSIGN( cTargetCube , cTargetRandObjName , sDim , cTargetRandObjName );
	ENDIF;
	nDimCount = nDimCount +1;
END;

#--------------------------------------------------------------
ViewSuppressZeroesSet( cTargetCube , cTargetRandObjName , 1 );
ViewExtractSkipZeroesSet(cTargetCube, cTargetRandObjName , 1 );
ViewExtractSkipRuleValuesSet(cTargetCube, cTargetRandObjName, 1);

#---Zero Out the view in the Target Version 
ViewZeroOut(cTargetCube, cTargetRandObjName);

#-----------------
# Set source view
#-----------------
ViewCreate( 'plan_Balance_Sheet' , cSourceObj , 1 );

SubsetCreatebyMDX( cSourceObj , '{[plan_Version].[plan_Version].['|pVersionFrom |']}' , cTemp ); 
SubsetCreatebyMDX( cSourceObj , '{[Currency].[Currency].[LCY]}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{[plan_Period].[plan_Period].['|pPeriodFrom|']}' , cTemp ); 
SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Branch].[Branch]) , 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Business_Unit].[Business_Unit]) , 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Account_BS].[Account_BS]) , 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{[m_plan_Balance_Sheet].[m_plan_Balance_Sheet].[Value]}' , cTemp );

nDimCount = 1;
WHILE( TABDIM( 'plan_Balance_Sheet' , nDimCount )@<> '' );
	sDim = TABDIM( 'plan_Balance_Sheet' , nDimCount );
	IF( SUBSETEXISTS( sDim , cSourceObj ) = 1 );
		VIEWSUBSETASSIGN( 'plan_Balance_Sheet' , cSourceObj , sDim , cSourceObj );
	ENDIF;
	nDimCount = nDimCount +1;
END;

ViewSuppressZeroesSet( 'plan_Balance_Sheet' , cSourceObj , 1 );
ViewExtractSkipCalcsSet( 'plan_Balance_Sheet' , cSourceObj , 0 );
ViewExtractSkipZeroesSet( 'plan_Balance_Sheet' , cSourceObj , 1 );

 If(pVersionType@='Calculated');
     ViewExtractSkipRuleValuesSet('plan_Balance_Sheet', cSourceObj, 0);
Else;
    ViewExtractSkipRuleValuesSet('plan_Balance_Sheet', cSourceObj, 0);
Endif;


DataSourceType = 'VIEW' ;
DataSourceNameForServer = 'plan_Balance_Sheet' ;
DataSourceCubeView = cSourceObj ;

#---Source Year based on the Source Period Input using the Opening Balance of the New Version 
sSourcePeriodYear = CellGetS('plan_Version_Setup', pVersionTo, pPeriodTo, 'Source Period' );

#--Source Version  based on the Source Period Input using the Opening Balance of the New Version 
sSourcePeriodVersion =  CellGetS('plan_Version_Setup', pVersionTo, pPeriodTo, 'Source Version' );

#endregion
#region Data

# ASCIIOutput( 'temp.bal_open.txt', sSourcePeriodYear, sSourcePeriodVersion, pVersionTo, pPeriodTo
#             ,vplan_Version, vCurrency, vplan_Period, vBranch, vBusiness_Unit, vAccount_BS, NumberToString( vValue ) );

 if(CellIsUpdateable( 'plan_Balance_Sheet',pVersionTo, vCurrency,pPeriodTo , vBranch, vBusiness_Unit, vAccount_BS, 'Value'  )=1);
    CellPutN( vValue, 'plan_Balance_Sheet',pVersionTo, vCurrency,pPeriodTo, vBranch, vBusiness_Unit, vAccount_BS, 'Value'  );
    # ASCIIOutput( 'temp.bal_open_cellputn.txt', sSourcePeriodYear, sSourcePeriodVersion, pVersionTo, pPeriodTo
            # ,vplan_Version, vCurrency, vplan_Period, vBranch, vBusiness_Unit, vAccount_BS, NumberToString( vValue ) );
 endif;

#endregion
#region Epilog

If(sErr@<>'');
    ItemReject( sErr );
Endif;    
#endregion