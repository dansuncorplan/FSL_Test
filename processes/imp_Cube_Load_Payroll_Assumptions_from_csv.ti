#region Prolog


#~~~~~~~~~~ProcessLogging~~~~~~~~~~#
#Variables
processName=GetProcessName();
timeStart=NOW;
dateStart = TIMST(timeStart,'\Y \M \d - \h:\i:\s');
elementName = processName | ' - ' | dateStart;
countRecords = 0;
status = 'Not Complete';
#Send parameters to StartLogging
return_value = ExecuteProcess('z_ADMIN_Process_Logging_Start','processName', processName,'elementName',elementName);
#Write status information for Start
CELLPUTS(status,'z_Process_Logging',elementName,'Status');
CELLPUTS(dateStart,'z_Process_Logging',elementName,'StartTime');
CELLPUTS(processName,'z_Process_Logging',elementName,'ProcessName');
CELLPUTS(status,'z_Process_Logging',processName,'Status');
CELLPUTS(dateStart,'z_Process_Logging',processName,'StartTime');
CELLPUTS(processName,'z_Process_Logging',processName,'ProcessName');
#~~~~~~~~~~EndProcessLogging~~~~~~~~~~#


#****Begin: Generated Statements***
#****End: Generated Statements****





## Description
## Loads Payroll Assumptions from csv for ALL BRANCHES AND ALL BUSINESS UNITS




## Hardcoded Variables

sTargetCube = 'plan_Payroll_Assumptions' ;

sParameterCube = 'z_System_Parameters' ;

sVersionDim = 'plan_Version' ;
sPeriodDim = 'plan_Period' ;
sBranchDim = 'Branch' ;
sBusUnitDim = 'Business_Unit' ;

sTargetMeasureDim = 'm_plan_Payroll_Assumptions' ;

sView = processName ;
sSubset = sView ;



## Set Source File

# sFileFolder = CELLGETS( sParameterCube, 'Import_Directory', 'String' ) | '\' | processName | '\' ;

# sDatasource = sFileFolder | pFileName ;


sFileFolder='./';
sDatasource = sFileFolder | pFileName ;


DATASOURCENAMEFORSERVER = sDatasource ;




## Create Target View

sCube = sTargetCube ;

IF( VIEWEXISTS( sCube, sView ) = 1 ) ;
	VIEWDESTROY( sCube, sView ) ;
ENDIF ;

VIEWCREATE( sCube, sView ) ;




## Subset - Version

sDim = sVersionDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( sElement @= pVersion ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Period

sDim = sPeriodDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELISANC( sDim, DIMENSIONELEMENTPRINCIPALNAME( sDim, pYear ), sElement ) = 1 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Business Unit

sDim = sBusUnitDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;



## Subset - Branch

sDim = sBranchDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;



## Subset - Measure

sDim = sTargetMeasureDim ;

IF( SUBSETEXISTS( sDim, sSubset ) = 1 ) ;
	SUBSETDESTROY( sDim, sSubset ) ;
ENDIF ;

SUBSETCREATE( sDim, sSubset ) ;

nLoopCount = 1 ;
nLoopMax = DIMSIZ( sDim ) ;

WHILE( nLoopCount <= nLoopMax ) ;

	sElement = DIMNM( sDim, nLoopCount ) ;

	IF( ELLEV( sDim, sElement ) = 0 ) ;
		SUBSETELEMENTINSERT( sDim, sSubset, sElement, 1 ) ;
	ENDIF ;

	nLoopCount = nLoopCount + 1 ;

END ;

VIEWSUBSETASSIGN( sCube, sView, sDim, sSubset ) ;




## Zero Out Target View

VIEWZEROOUT( sCube, sView ) ;



## Destroy Target View & Subsets

VIEWDESTROY( sCube, sView ) ;

SUBSETDESTROY( sVersionDim, sSubset ) ;
SUBSETDESTROY( sPeriodDim, sSubset ) ;
SUBSETDESTROY( sBusUnitDim, sSubset ) ;
SUBSETDESTROY( sBranchDim, sSubset ) ;
SUBSETDESTROY( sTargetMeasureDim, sSubset ) ;

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****








#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****



## Loop through Business Units and Branches

nLoop = 1 ;
nLoopMax = SUBSETGETSIZE( sBusUnitDim, 'Picklist_Sub_Unit' ) ;

WHILE( nLoop <= nLoopMax ) ;

	sLoopBU = SUBSETGETELEMENTNAME( sBusUnitDim, 'Picklist_Sub_Unit', nLoop ) ;

	nLoopBranch = 1 ;
	nLoopBranchMax = SUBSETGETSIZE( sBranchDim, 'Picklist_Branch' ) ;

	WHILE( nLoopBranch <= nLoopBranchMax ) ;

		sLoopBranch = SUBSETGETELEMENTNAME( sBranchDim, 'Picklist_Branch', nLoopBranch ) ;

		## Load - Working Days
	
		sMeasure = 'Working Days';
		nValue = vWorking_Days;
		textoutput( 'test.txt', sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;
		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;


		## Load - Public Holidays
	
		sMeasure = 'Public Holidays';
		nValue = vPublic_Holidays;

		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;


		## Load - Closed
	
		sMeasure = 'Closed Days';
		nValue = vClosed;

		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;


		## Load - Kiwisaver
	
		sMeasure = 'Avg Kiwisaver %';
		nValue = vKiwisaver;

		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;


		## Load - Leave Accrual
	
		sMeasure = 'Leave Accrual %';
		nValue = vLeave_Accrual;

		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;


		## Load - Leave Taken
	
		sMeasure = 'Leave Taken %';
		nValue = vLeave_Taken;

		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;


		## Load - Amount Increase
	
		sMeasure = 'Avg Amount Increase %';
		nValue = vPercentage_Increase;

		CELLPUTN( nValue, sTargetCube, pVersion, vPeriod, sLoopBU, sLoopBranch, sMeasure ) ;

		nLoopBranch = nLoopBranch + 1 ;

	END ;

	nLoop = nLoop + 1 ;

END ;





#~~~~~~~~~~ProcessLogging~~~~~~~~~~#
countRecords = countRecords + 1;
#~~~~~~~~~~EndProcessLogging~~~~~~~~~~#

#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****












#~~~~~~~~~~ProcessLogging~~~~~~~~~~#
#Variables
timeFinish=NOW;
elapsedTime=TIMST(timeFinish - timeStart,'\h:\i:\s');
dateFinish = TIMST(timeFinish,'\Y \M \d - \h:\i:\s');
status = 'Complete';
#Write status information for Finish
CELLPUTS(status,'z_Process_Logging',elementName,'Status');
CELLPUTS(dateFinish,'z_Process_Logging',elementName,'FinishTime');
CELLPUTS(elapsedTime,'z_Process_Logging',elementName,'Elapsed Time');
CELLPUTN(countRecords,'z_Process_Logging',elementName,'Records');
CELLPUTS(status,'z_Process_Logging',processName,'Status');
CELLPUTS(dateFinish,'z_Process_Logging',processName,'FinishTime');
CELLPUTS(elapsedTime,'z_Process_Logging',processName,'Elapsed Time');
#~~~~~~~~~~EndProcessLogging~~~~~~~~~~#
#endregion