#region Prolog

# #----------------------------------------------------
#  Define constant
# #----------------------------------------------------

cProcessName = GetProcessName();

sErr = '' ;

cTimeStamp = TIMST( NOW() , '\Y\m\d\h\i\s' ) | NumberToString( RAND * 1000000000 );
cTempObjName = Expand('%cProcessName%_%cTimeStamp%');
cSourceObj='source_'|cTempObjName;
cTargetRandObjName = 'Target'|cProcessName|cTimeStamp;
cTemp = 1 ;

#--------------
If(pVersionFrom@=pVersionTo & pPeriodFrom@=pPeriodTo);
    sErr='Source and target cannot be the same!';
    ProcessBreak; 
Endif;    


# # ----------------------------------------------------
# # zero target view
# # ----------------------------------------------------
cTargetCube = 'Plan_Sales';

ViewCreate( cTargetCube , cTargetRandObjName , cTemp );

# SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Business_Unit].[Business_Unit]) , 0)}' , cTemp );

# Clears only the BU specified in the parameter
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Business_Unit].[Business_Unit]) , 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Branch].[Branch]) , 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL({{DISTINCT({DESCENDANTS([Customer_Sales].[Customer_Sales].[Customer_by_Business_Unit])})}}, 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{TM1FILTERBYLEVEL({{DISTINCT({DESCENDANTS([Product_Group].[Product_Group].[Product_by_Business_Unit])})}}, 0)}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{[plan_Period].[plan_Period].['|pPeriodTo |']}' , cTemp ); 
SubsetCreatebyMDX( cTargetRandObjName , '{[plan_Version].[plan_Version].['|pVersionTo |']}' , cTemp ); 
SubsetCreatebyMDX( cTargetRandObjName , '{[Currency_Sales].[Currency_Sales].[NZD]}' , cTemp );
SubsetCreatebyMDX( cTargetRandObjName , '{TM1SubsetToSet([m_plan_Sales].[m_plan_Sales],"sys.measuresforversioncopy","public")}' , cTemp );

nDimCount = 1;
WHILE( TABDIM( cTargetCube , nDimCount )@<> '' );
	sDim = TABDIM( cTargetCube , nDimCount );
	IF( SUBSETEXISTS( sDim , cTargetRandObjName ) = 1 );
		VIEWSUBSETASSIGN( cTargetCube , cTargetRandObjName , sDim , cTargetRandObjName );
	ENDIF;
	nDimCount = nDimCount +1;
END;

#----------------------------------------------------
ViewSuppressZeroesSet( cTargetCube , cTargetRandObjName , 1 );
ViewExtractSkipZeroesSet(cTargetCube, cTargetRandObjName , 1 );
ViewExtractSkipRuleValuesSet(cTargetCube, cTargetRandObjName, 1);

#---Zero Out the view in the Target Version 
ViewZeroOut(cTargetCube, cTargetRandObjName);


#-----------------
# Set source view
#-----------------
ViewCreate( 'plan_Sales' , cSourceObj , 1 );

SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Business_Unit].[Business_Unit]) , 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL(TM1SUBSETALL([Branch].[Branch]) , 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL({{DISTINCT({DESCENDANTS([Customer_Sales].[Customer_Sales].[Customer_by_Business_Unit])})}}, 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{TM1FILTERBYLEVEL({{DISTINCT({DESCENDANTS([Product_Group].[Product_Group].[Product_by_Business_Unit])})}}, 0)}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{[plan_Period].[plan_Period].['|pPeriodFrom |']}' , cTemp ); 
SubsetCreatebyMDX( cSourceObj , '{[plan_Version].[plan_Version].['|pVersionFrom |']}' , cTemp ); 
SubsetCreatebyMDX( cSourceObj , '{[Currency_Sales].[Currency_Sales].[NZD]}' , cTemp );
SubsetCreatebyMDX( cSourceObj , '{TM1SubsetToSet([m_plan_Sales].[m_plan_Sales],"sys.measuresforversioncopy","public")}' , cTemp );

nDimCount = 1;
WHILE( TABDIM( 'plan_Sales' , nDimCount )@<> '' );
	sDim = TABDIM( 'plan_Sales' , nDimCount );
	IF( SUBSETEXISTS( sDim , cSourceObj ) = 1 );
		VIEWSUBSETASSIGN( 'plan_Sales' , cSourceObj , sDim , cSourceObj );
	ENDIF;
	nDimCount = nDimCount +1;
END;

ViewSuppressZeroesSet( 'plan_Sales' , cSourceObj , 1 );
ViewExtractSkipCalcsSet( 'plan_Sales' , cSourceObj , 1 );
ViewExtractSkipZeroesSet( 'plan_Sales' , cSourceObj , 1 );
ViewExtractSkipRuleValuesSet( 'plan_Sales' , cSourceObj , 1 );

DataSourceType = 'VIEW' ;
DataSourceNameForServer = 'plan_Sales' ;
DataSourceCubeView = cSourceObj ;

#endregion
#region Data

    sSourcePeriod = CellGetS('plan_Version_Setup', pVersionTo,vplan_Period, 'Source Period' );
    sSourceVersion = CellGetS('plan_Version_Setup', pVersionTo,vplan_Period, 'Source Version' );

IF (sSourcePeriod @='' &sSourceVersion@=''  );
  ItemSkip;
endIF;

sTargetPeriodYear = CellGetS('plan_Version_Setup', pVersionTo,'Annual Input', 'Base Year' ); 
sTargetStartMonth = CellGetS('plan_Version_Setup', pVersionTo,'Annual Input', 'Plan Start Month' ); 
sTargetEndMonth = CellGetS('plan_Version_Setup', pVersionTo,'Annual Input', 'Plan End Month' ); 
sTargetMonthStart = ATTRN( 'plan_Period', sTargetStartMonth, 'Period_Number' );
sTargetMonthEnd = ATTRN(  'plan_Period', sTargetEndMonth, 'Period_Number' );
sTargetYear = ATTRS( 'plan_Period', sTargetEndMonth, 'rpt_Year' ); 

CellPutN( vValue, 'plan_Sales', pVersionTo, vCurrency_Sales, pPeriodTo, vBranch, vBusiness_Unit, vCustomer_Sales, vProduct_Group, vm_plan_Sales );

#endregion
#region Epilog

If(sErr@<>'');
    ItemReject( sErr );
Endif;    
#endregion